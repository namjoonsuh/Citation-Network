title(TeX("$\\X^{orig}$"))
plotScree(X)
title(TeX("$\\X^{orig}$"))
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"))
DF <- data.frame(FE = eigen(L1)$vector[,1], SE = eigen(L1)$vector[,2], Cluster = rep(0,N))
DF[Topic1,3]=1; DF[Topic2,3]=2; DF[Topic3,3]=3;
plot(DF[,1:2], col=KMeans$cluster,pch=2,xlab="First Eigen",ylab="Second Eigen")
legend(-0.3, 0.33, legend=c("Variable Selection", "Mixed Clusters", "Multiple Testing"),
col = c("red","green","black"), pch=2, cex=0.8)
KMeans$cluster
View(non_zeroS)
View(L_Rank)
View(L_Rank)
View(SynData)
title(TeX("$\\X^{sub}$"),cex=1)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex=1)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex=0.5)
title(TeX("$\\X^{sub}$"), family="LM Roman 10")
title(TeX("$\\X^{sub}$"))
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"))
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"))
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"))
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"))
title(TeX("$\\X^{sub}$"),cex.main=1)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=1)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=1)
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=1)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=1)
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=1)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=1)
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.5)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.5)
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.75)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.75)
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=1)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=1)
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.90)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.9)
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.85)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.85)
par(mfrow=c(2,3),mar = c(1.5, 1.5, 1.5, 1.5)) # ??? ??? ??? ??? #
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.85)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.85)
par(mfrow=c(1,2),mar = c(1.5, 1.5, 1.5, 1.5)) # ??? ??? ??? ??? #
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.85)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.85)
par(mfrow=c(1,2),mar = c(1.5, 2, 1.5, 1.5)) # ??? ??? ??? ??? #
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.85)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.85)
par(mfrow=c(1,2),mar = c(2, 2, 1.5, 1.5)) # ??? ??? ??? ??? #
plotScree(X)
title(TeX("$\\X^{orig}$"),cex.main=0.85)
plotScree(X_chunk)
title(TeX("$\\X^{sub}$"),cex.main=0.85)
result2 <- ADMM(X_chunk, 0.00312, 0.0146) # Gamma : 0.00312, delta : 0.0146
N = ncol(X_chunk)
a2<-result2[[1]]
M2<-result2[[2]]
L2<-result2[[3]]
S2<-result2[[4]]
qr(L2)$rank
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S2[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
result1 <- ADMM(X, 0.002109, 0.0194)  ## Gamma : 0.002109, Delta : 0.0194
a1 <- result1[[1]]
M1 <- result1[[2]]
L1 <- result1[[3]]
S1 <- result1[[4]]
K<-qr(L1)$rank; K;
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S1[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S;
H_Zou = which(row.names(X)=="V507",arr.ind=TRUE)
H_Zou_Cit_pap = which(X_new[H_Zou,]==1, arr.ind=TRUE)
H_Zou_Cit_pap_ind = as.numeric(sub('.','',row.names(X_new)[H_Zou_Cit_pap]))
H_Zou_paper = paperList[H_Zou_Cit_pap_ind,c(3,6)]
length(which(H_Zou_paper[,2]=="Mixed Topics",arr.ind=TRUE))
H_Zou = which(row.names(X)=="V507",arr.ind=TRUE)
H_Zou_Cit_pap = which(X[H_Zou,]==1, arr.ind=TRUE)
H_Zou_Cit_pap_ind = as.numeric(sub('.','',row.names(X)[H_Zou_Cit_pap]))
H_Zou_paper = paperList[H_Zou_Cit_pap_ind,c(3,6)]
length(which(H_Zou_paper[,2]=="Mixed Topics",arr.ind=TRUE))
H_Zou
H_Zou_Cit_pap
as.numeric(sub('.','',row.names(X)[H_Zou_Cit_pap]))
H_Zou_Cit_pap_ind
H_Zou_Cit_pap_ind = as.numeric(sub('.','',row.names(X)[H_Zou_Cit_pap]))
paperList
set.seed(1233)
K = qr(L1)$rank;
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Statistician network data')
KMeans = kmeans(eigen(L)$vectors[,1:K], K, iter.max = 1000, nstart = 100, algorithm = "Hartigan-Wong")
Topic1 = which(KMeans$cluster == 1,arr.ind = TRUE)
Topic2 = which(KMeans$cluster == 2,arr.ind = TRUE)
Topic3 = which(KMeans$cluster == 3,arr.ind = TRUE)
paperList = read.table("paperList.txt", sep=",", stringsAsFactors=F, header=T)
community = rep(0,nrow(paperList))
paperList = cbind(paperList,community)
row_name = row.names(X)
Topic_1 = as.numeric(sub('.','',row_name[Topic1]))
Topic_2 = as.numeric(sub('.','',row_name[Topic2]))
Topic_3 = as.numeric(sub('.','',row_name[Topic3]))
pap_list = paperList[,3]
T1 = pap_list[Topic_1]
T2 = pap_list[Topic_2]
T3 = pap_list[Topic_3]
T1
T2
T3
a1 <- result1[[1]]
M1 <- result1[[2]]
L1 <- result1[[3]]
S1 <- result1[[4]]
K<-qr(L1)$rank; K;
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S1[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S;
result1 <- ADMM(X, 0.002109, 0.0194)  ## Gamma : 0.002109, Delta : 0.0194
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes')
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
###### Get a network whose degree is greater than or equal to 10 ######
ind <- which(Node_deg>=10,arr.ind=TRUE)
X_new <- X[ind,ind]
N <- ncol(X_new)
A = rowSums(X_new)
ind = which(A==0,arr.ind=TRUE)
X = X_new[-ind,-ind]
rm(list=ls())
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
################### Load the Citation Network Data ###################
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Statistician network data')
paperCitAdj = as.matrix(read.table("paperCitAdj.txt", header=FALSE))
G <- graph.adjacency(paperCitAdj, mode="undirected", weighted=NULL) # For directed networks
X <- as_adjacency_matrix(G,type="both",names=TRUE,sparse=FALSE,attr=NULL)
Node_deg <- rep(0,nrow(X))
for (i in 1:sqrt(length(X))){
Node_deg[i]<-sum(X[i,])
}
################### Load Functions for analysis ###################
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes')
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
###### Get a network whose degree is greater than or equal to 10 ######
ind <- which(Node_deg>=10,arr.ind=TRUE)
X_new <- X[ind,ind]
N <- ncol(X_new)
A = rowSums(X_new)
ind = which(A==0,arr.ind=TRUE)
X = X_new[-ind,-ind]
result1 <- ADMM(X, 0.002109, 0.0194)  ## Gamma : 0.002109, Delta : 0.0194
a1 <- result1[[1]]
M1 <- result1[[2]]
L1 <- result1[[3]]
S1 <- result1[[4]]
K<-qr(L1)$rank; K;
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S1[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S;
N = ncol(X)
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S1[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S;
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S1[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S;
set.seed(1233)
K = qr(L1)$rank;
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Statistician network data')
KMeans = kmeans(eigen(L)$vectors[,1:K], K, iter.max = 1000, nstart = 100, algorithm = "Hartigan-Wong")
Topic1 = which(KMeans$cluster == 1,arr.ind = TRUE)
Topic2 = which(KMeans$cluster == 2,arr.ind = TRUE)
Topic3 = which(KMeans$cluster == 3,arr.ind = TRUE)
paperList = read.table("paperList.txt", sep=",", stringsAsFactors=F, header=T)
community = rep(0,nrow(paperList))
paperList = cbind(paperList,community)
row_name = row.names(X)
Topic_1 = as.numeric(sub('.','',row_name[Topic1]))
Topic_2 = as.numeric(sub('.','',row_name[Topic2]))
Topic_3 = as.numeric(sub('.','',row_name[Topic3]))
pap_list = paperList[,3]
T1 = pap_list[Topic_1]
T2 = pap_list[Topic_2]
T3 = pap_list[Topic_3]
set.seed(1233)
K = qr(L1)$rank;
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Statistician network data')
KMeans = kmeans(eigen(L1)$vectors[,1:K], K, iter.max = 1000, nstart = 100, algorithm = "Hartigan-Wong")
Topic1 = which(KMeans$cluster == 1,arr.ind = TRUE)
Topic2 = which(KMeans$cluster == 2,arr.ind = TRUE)
Topic3 = which(KMeans$cluster == 3,arr.ind = TRUE)
paperList = read.table("paperList.txt", sep=",", stringsAsFactors=F, header=T)
community = rep(0,nrow(paperList))
paperList = cbind(paperList,community)
row_name = row.names(X)
Topic_1 = as.numeric(sub('.','',row_name[Topic1]))
Topic_2 = as.numeric(sub('.','',row_name[Topic2]))
Topic_3 = as.numeric(sub('.','',row_name[Topic3]))
pap_list = paperList[,3]
T1 = pap_list[Topic_1]
T2 = pap_list[Topic_2]
T3 = pap_list[Topic_3]
T1
T2
T3
Edge = which(S1>0, arr.ind=TRUE)
g = graph_from_edgelist(Edge)
S_g = as.undirected(g)
Edge_list = get.edgelist(S_g)
Ad_hoc_link <- data.frame(Pair1 = Edge_list[,1], Pair2 = Edge_list[,2],  S_val = S1[Edge_list])
Sorted_Ad_hoc_link <- Ad_hoc_link[order(-Ad_hoc_link$S_val),]
Edge_list <- as.matrix(Sorted_Ad_hoc_link[,1:2])
row_name = row.names(X)
col1 = as.numeric(sub('.','',row_name[Edge_list[,1]]))
col2 = as.numeric(sub('.','',row_name[Edge_list[,2]]))
Paper_Table = matrix(as.numeric(cbind(col1,col2)),length(Edge_list)/2,2)
pap_list = paperList[,3]
C1 = pap_list[col1]
C2 = pap_list[col2]
Ad_hoc_list = list()
P1 = paperList[col1,c(1,6,3)]
P2 = paperList[col2,c(1,6,3)]
for(i in 1:length(col1)){
Ad_hoc_list = rbind(Ad_hoc_list,P1[i,],P2[i,])
}
Ad_hoc_list = cbind(10^4*Sorted_Ad_hoc_link[,3],Ad_hoc_list)
Ad_hoc_list
################# View the papers of Ad-hoc pair #################
which(Ad_hoc_list[,3]=="Multiple Testing")
which(Ad_hoc_list[,3]=="Variable Selection")
write.csv(Ad_hoc_list, "C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ad_hoc_192.csv")
View(Ad_hoc_list)
T1
T2
paperList[Topic_1,6] = "Variable Selection"
paperList[Topic_2,6] = "Multiple Testing"
Edge = which(S1>0, arr.ind=TRUE)
g = graph_from_edgelist(Edge)
S_g = as.undirected(g)
Edge_list = get.edgelist(S_g)
Ad_hoc_link <- data.frame(Pair1 = Edge_list[,1], Pair2 = Edge_list[,2],  S_val = S1[Edge_list])
Sorted_Ad_hoc_link <- Ad_hoc_link[order(-Ad_hoc_link$S_val),]
Edge_list <- as.matrix(Sorted_Ad_hoc_link[,1:2])
row_name = row.names(X)
col1 = as.numeric(sub('.','',row_name[Edge_list[,1]]))
col2 = as.numeric(sub('.','',row_name[Edge_list[,2]]))
Paper_Table = matrix(as.numeric(cbind(col1,col2)),length(Edge_list)/2,2)
pap_list = paperList[,3]
C1 = pap_list[col1]
C2 = pap_list[col2]
Ad_hoc_list = list()
P1 = paperList[col1,c(1,6,3)]
P2 = paperList[col2,c(1,6,3)]
for(i in 1:length(col1)){
Ad_hoc_list = rbind(Ad_hoc_list,P1[i,],P2[i,])
}
Ad_hoc_list = cbind(10^4*Sorted_Ad_hoc_link[,3],Ad_hoc_list)
Ad_hoc_list
View(Ad_hoc_list)
T3
X_chunk = X[Topic3,Topic3]
result2 <- ADMM(X_chunk, 0.00312, 0.0146) # Gamma : 0.00312, delta : 0.0146
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes') ## Function of ADMM algorithm for estimation
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
result2 <- ADMM(X_chunk, 0.00312, 0.0146) # Gamma : 0.00312, delta : 0.0146
N = ncol(X_chunk)
a2<-result2[[1]]
M2<-result2[[2]]
L2<-result2[[3]]
S2<-result2[[4]]
K=qr(L2)$rank;
K
KMeans = kmeans(eigen(L2)$vectors[,1:K], K, iter.max = 1000, nstart = 100, algorithm = "Hartigan-Wong")
Topic3 = which(KMeans$cluster == 1,arr.ind = TRUE)
Topic4 = which(KMeans$cluster == 2,arr.ind = TRUE)
Topic5 = which(KMeans$cluster == 3,arr.ind = TRUE)
Topic6 = which(KMeans$cluster == 4,arr.ind = TRUE)
Topic7 = which(KMeans$cluster == 5,arr.ind = TRUE)
paperList = read.table("C:/Users/nsuh3/Desktop/Citation Network/paperList.txt", sep=",", stringsAsFactors=F, header=T)
community = rep(0,nrow(paperList))
paperList = cbind(paperList,community)
row_name = row.names(X_chunk)
Topic_3 = as.numeric(sub('.','',row_name[Topic3]))
Topic_4 = as.numeric(sub('.','',row_name[Topic4]))
Topic_5 = as.numeric(sub('.','',row_name[Topic5]))
Topic_6 = as.numeric(sub('.','',row_name[Topic6]))
Topic_7 = as.numeric(sub('.','',row_name[Topic7]))
pap_list = paperList[,3]
T3 = pap_list[Topic_3]
T4 = pap_list[Topic_4]
T5 = pap_list[Topic_5]
T6 = pap_list[Topic_6]
T7 = pap_list[Topic_7]
paperList
T3
T4
T5
T6
T7
paperList[Topic_3,6] = "Mixed Topics"
paperList[Topic_4,6] = "Dimension Reduction"
paperList[Topic_5,6] = "Bayesian Nonparametric Stat"
paperList[Topic_6,6] = "Covariance Estimation"
paperList[Topic_7,7] = "Functional/Longitudinal Analysis"
Ad_hoc_list
Edge = which(S1>0, arr.ind=TRUE)
g = graph_from_edgelist(Edge)
S_g = as.undirected(g)
Edge_list = get.edgelist(S_g)
Ad_hoc_link <- data.frame(Pair1 = Edge_list[,1], Pair2 = Edge_list[,2],  S_val = S1[Edge_list])
Sorted_Ad_hoc_link <- Ad_hoc_link[order(-Ad_hoc_link$S_val),]
Edge_list <- as.matrix(Sorted_Ad_hoc_link[,1:2])
row_name = row.names(X)
col1 = as.numeric(sub('.','',row_name[Edge_list[,1]]))
col2 = as.numeric(sub('.','',row_name[Edge_list[,2]]))
Paper_Table = matrix(as.numeric(cbind(col1,col2)),length(Edge_list)/2,2)
pap_list = paperList[,3]
C1 = pap_list[col1]
C2 = pap_list[col2]
Ad_hoc_list = list()
P1 = paperList[col1,c(1,6,3)]
P2 = paperList[col2,c(1,6,3)]
for(i in 1:length(col1)){
Ad_hoc_list = rbind(Ad_hoc_list,P1[i,],P2[i,])
}
Ad_hoc_list = cbind(10^4*Sorted_Ad_hoc_link[,3],Ad_hoc_list)
Ad_hoc_list
Edge_list
row_name = row.names(X)
col1 = as.numeric(sub('.','',row_name[Edge_list[,1]]))
col2 = as.numeric(sub('.','',row_name[Edge_list[,2]]))
Paper_Table = matrix(as.numeric(cbind(col1,col2)),length(Edge_list)/2,2)
pap_list = paperList[,3]
pap_list
col1
C1 = pap_list[col1]
C1
C2 = pap_list[col2]
C2
paperList[Topic_7,7] = "Functional/Longitudinal Analysis"
paperList[Topic_7,6] = "Functional/Longitudinal Analysis"
Edge = which(S1>0, arr.ind=TRUE)
g = graph_from_edgelist(Edge)
S_g = as.undirected(g)
Edge_list = get.edgelist(S_g)
Ad_hoc_link <- data.frame(Pair1 = Edge_list[,1], Pair2 = Edge_list[,2],  S_val = S1[Edge_list])
Sorted_Ad_hoc_link <- Ad_hoc_link[order(-Ad_hoc_link$S_val),]
Edge_list <- as.matrix(Sorted_Ad_hoc_link[,1:2])
row_name = row.names(X)
col1 = as.numeric(sub('.','',row_name[Edge_list[,1]]))
col2 = as.numeric(sub('.','',row_name[Edge_list[,2]]))
Paper_Table = matrix(as.numeric(cbind(col1,col2)),length(Edge_list)/2,2)
pap_list = paperList[,3]
C1 = pap_list[col1]
C2 = pap_list[col2]
Ad_hoc_list = list()
P1 = paperList[col1,c(1,6,3)]
P2 = paperList[col2,c(1,6,3)]
for(i in 1:length(col1)){
Ad_hoc_list = rbind(Ad_hoc_list,P1[i,],P2[i,])
}
write.csv(Ad_hoc_list, "C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ad_hoc_51.csv")
H_Zou = which(row.names(X)=="V507",arr.ind=TRUE)
H_Zou_Cit_pap = which(X[H_Zou,]==1, arr.ind=TRUE)
H_Zou_Cit_pap_ind = as.numeric(sub('.','',row.names(X)[H_Zou_Cit_pap]))
H_Zou_paper = paperList[H_Zou_Cit_pap_ind,c(3,6)]
length(which(H_Zou_paper[,2]=="Mixed Topics",arr.ind=TRUE))
H_Zou_paper = paperList[H_Zou_Cit_pap_ind,c(3,6)]
H_Zou_paper
length(H_Zou_paper)
View(P1)
Result <- load("C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/Syn_Result.RData")
Result
object_list[[1]]
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('Synthetic Networks.R')
#################### data generation N = 30, K = 3, NNZ = 10 ####################
set.seed(123)
par(mfrow=c(2,3),mar = c(2, 2, 2, 2)) # ??? ??? ??? ??? #
######## First Scenario ########
set.seed(123); Net1 <- Network1(30,3,9,1)
set.seed(123); Net2 <- Network1(80,4,18,2)
set.seed(123); Net3 <- Network1(120,5,30,3)
######## Second Scenario ########
set.seed(123); Net4 <- Network2(120,10,0,3,20,4)
set.seed(123); Net5 <- Network2(210,0,50,3,18,5)
set.seed(123); Net6 <- Network2(210,10,10,3,18,6)
par(mfrow=c(1,1))
source('functions.R')
par(mfrow=c(2,3),mar = c(2, 2, 2, 1))
plotScree(Net1[[1]],1); plotScree(Net2[[1]],2); plotScree(Net3[[1]],3);
plotScree(Net4[[1]],4); plotScree(Net5[[1]],5); plotScree(Net6[[1]],6);
par(mfrow=c(1,1))
set.seed(1234); K_means(Net1[[1]],0.011,0.024,3,1);
object_list[[1]]
gamma = seq(from=0.01,to=0.02,by=0.001);
delta = seq(from=0.02,to=0.03,by=0.001);
set.seed(1234); K_means(Net1[[1]],gamma[11],delta[11],2,1);
gamma = seq(from=0.004,to=0.005,by=0.0001);
delta = seq(from=0.009,to=0.01,by=0.0001);
object_list[[2]]
set.seed(1234); K_means(Net2[[1]],gamma[1],delta[11],3,2);
gamma = seq(from=0.002,to=0.003,by=0.0001);
delta = seq(from=0.0046,to=0.0048,by=0.00002);
object_list[[3]]
gamma[3]
delta[5]
Res3 <- Model_Sel(Net3[[1]],gamma,delta) ## gamma : 0.003, delta : 0.00475 ##
object_list[[4]]
gamma = seq(from=0.002,to=0.004,by=0.0002);
delta = seq(from=0.015,to=0.02,by=0.0005);
set.seed(1234); K_means(Net3[[1]],0.003,0.00476,5,3);
View(K_means)
View(K_means)
gamma=0.003
delta=0.00476
X=Net3[[1]]
result <- ADMM(X, gamma, delta)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
K = qr(L)$rank
N = ncol(X)
K
gamma = seq(from=0.002,to=0.003,by=0.0001);
delta = seq(from=0.0046,to=0.0048,by=0.00002);
set.seed(1234); K_means(Net3[[1]],gamma[3],delta[5],4,3);
