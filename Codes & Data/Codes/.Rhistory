S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
result <- ADMM(X, 0.0, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
sum(X)/2
result <- ADMM(X, 0.005, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.002, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.001, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.0001, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.0005, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.01, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
0.0007-0.0005
(0.0007-0.0005)/200
gamma = seq(from=0.0005,to=0.0007,by=1e-06);
gamma = seq(from=0.0005,to=0.0007,by=1e-06);
delta = seq(from=0.01,to=0.01,by=0.000);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
N
source('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
View(L_Rank)
result <- ADMM(X, 0.0007, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.0009, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
S
max(S)
sum(X)
result <- ADMM(X, 0.00095, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.00095, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
result <- ADMM(X, 0.001, 0.01)
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
gamma = seq(from=0.00095,to=0.001,by=0.00001);
delta = seq(from=0.01,to=0.01,by=0.000);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
source('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
gamma[2]
gamma = seq(from=0.000962,to=0.00097,by=0.00002);
gamma = seq(from=0.000962,to=0.00097,by=0.000002);
delta = seq(from=0.01,to=0.01,by=0.000);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
gamma
gamma = seq(from=0.0009624,to=0.000964,by=0.0000004);
delta = seq(from=0.01,to=0.01,by=0.000);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
sum(X)
sum(X)/2
gamma = seq(from=0.0009624,to=0.0009625,by=0.0000002);
gamma = seq(from=0.0009624,to=0.0009625,by=0.00000002);
delta = seq(from=0.01,to=0.01,by=0.000);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
gamma = seq(from=0.0009625,to=0.0009627,by=0.00000004);
delta = seq(from=0.01,to=0.01,by=0.000);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes/ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
