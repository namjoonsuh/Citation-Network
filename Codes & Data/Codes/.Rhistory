non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
gamma = seq(from=0.0009,to=0.00093,by=0.000003);
delta = seq(from=0.009,to=0.01,by=0.0001);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X_chunk[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X_chunk*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
non_zeroS
L_Rank
gamma = seq(from=0.00096,to=0.00099,by=0.000003);
delta = seq(from=0.009,to=0.01,by=0.0001);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
non_zero_S
non_zeroS
gamma = seq(from=0.001,to=0.001,by=0.00000);
delta = seq(from=0.009,to=0.01,by=0.0001);
L_Rank
################### Model Selection ###################
gamma = seq(from=0.001,to=0.001,by=0.00000);
delta = seq(from=0.009,to=0.01,by=0.0001);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
non_zeroS
L_Rank
gamma = seq(from=0.002,to=0.002,by=0.00000);
delta = seq(from=0.01,to=0.01,by=0.0001);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
non_zeroS
L_Rank
gamma = seq(from=0.005,to=0.005,by=0.00000);
delta = seq(from=0.01,to=0.01,by=0.0001);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
non_zeroS
L_Rank
gamma = seq(from=0.008,to=0.008,by=0.00000);
delta = seq(from=0.01,to=0.01,by=0.0001);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
non_zeroS
L_Rank
gamma = seq(from=0.01,to=0.01,by=0.00000);
delta = seq(from=0.01,to=0.01,by=0.0001);
gamma
delta
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Statistician network data')
paperCitAdj = as.matrix(read.table("paperCitAdj.txt", header=FALSE))
G <- graph.adjacency(paperCitAdj, mode="undirected", weighted=NULL) # For directed networks
X <- as_adjacency_matrix(G,type="both",names=TRUE,sparse=FALSE,attr=NULL)
Node_deg <- rep(0,nrow(X))
for (i in 1:sqrt(length(X))){
Node_deg[i]<-sum(X[i,])
}
###### Get a network whose degree is greater than or equal to 7 ######
ind <- which(Node_deg>=7,arr.ind=TRUE)
X_new <- X[ind,ind]
N <- ncol(X_new)
X_draw <- graph_from_adjacency_matrix(X_new, mode = c("undirected"))
plot(X_draw)
plotScree(X_new)
X = X_new
gamma = seq(from=0.01,to=0.01,by=0.00000);
delta = seq(from=0.01,to=0.01,by=0.0001);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_new)
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
non_zeroS
L_Rank
result <- ADMM(X, 0.04, 0.01)
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
non_zeroS
L_Rank
result <- ADMM(X, 1, 0.01)
a<-result1[[1]]
M<-result1[[2]]
L<-result1[[3]]
S<-result1[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
K<-qr(L)$rank
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
non_zeroS
L_Rank
