Net3[[2]] <- Net3[[2]][order(Net3[[2]][,1]),]
Net3[[2]]
set.seed(123); Net3 <- Network1(120,5,30,3)
Net3[[2]]
Net3[[2]]
Net3[[2]] <- Net3[[2]][order(Net3[[2]][,1]),]
Net3[[2]]
list
list[k,]
list[1,]
Net3[[2]][1,]
list[1,]==Net3[[2]][1,]
if(list[1,]==Net3[[2]][1,])
count = count + 1;
if(list[k,1]==Net3[[2]][l,1] && list[k,2]==Net3[[2]][l,2])
count = count + 1;
k=1
l=1
if(list[k,1]==Net3[[2]][l,1] && list[k,2]==Net3[[2]][l,2])
count = count + 1;
count
count = 0;
if(list[k,1]==Net3[[2]][l,1] && list[k,2]==Net3[[2]][l,2])
count = count + 1;
count
count = 0;
for(k in 1:length(list)/2){
for(l in 1:length(Net3[[2]])/2){
if(list[k,1]==Net3[[2]][l,1] && list[k,2]==Net3[[2]][l,2])
count = count + 1;
}
}
count = 0;
for(k in 1:(length(list)/2)){
for(l in 1:(length(Net3[[2]])/2)){
if(list[k,1]==Net3[[2]][l,1] && list[k,2]==Net3[[2]][l,2])
count = count + 1;
}
}
count
count
nrow(Net)
Net <- Net2[[1]]
n = nrow(Net)
n
Eval_func <- function(Net,gamma,delta){
n = nrow(Net);
Res <- ADMM(Net,gamma,delta);
rank <- qr(Res[[3]])$rank;
list <- c();
for(i in 1:n){
for(j in 1:n){
if(i<j && Res[[4]][i,j]!=0){
list = rbind(list, c(i,j));
}
}
}
count = 0;
for(k in 1:(length(list)/2)){
for(l in 1:(length(Net3[[2]])/2)){
if(list[k,1]==Net3[[2]][l,1] && list[k,2]==Net3[[2]][l,2])
count = count + 1;
}
}
result <- list(rank,count);
return(result)
}
set.seed(123); Net1 <- Network1(30,3,9,1)
####################  preparation  ####################
rm(list=ls())
setwd('C:/Users/Namjoon Suh/Desktop/Stat+PDE/Citation-Network/Codes & Data/Codes')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('Synthetic Networks.R')
source('GD2.R')
set.seed(123)
par(mfrow=c(2,3),mar = c(2, 2, 2, 2)) # ??? ??? ??? ??? #
######## First Scenario ########
set.seed(123); Net1 <- Network1(30,3,9,1)
set.seed(123); Net2 <- Network1(80,4,18,2)
set.seed(123); Net3 <- Network1(120,5,30,3)
Net1[[1]]
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
gamma = seq(from=0.01,to=0.02,by=0.001);
delta = seq(from=0.02,to=0.03,by=0.001);
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
View(ADMM)
View(Case1)
View(Case1)
which(AIC==min(AIC),arr.ind=TRUE)
AIC=case1[[1]]
AIC=Case1[[1]]
which(AIC==min(AIC),arr.ind=TRUE)
AIC_index <- which(AIC==min(AIC),arr.ind=TRUE)
AIC_index
BIC_index <- which(BIC==min(BIC),arr.ind=TRUE)
Case1[[3]]
Case1[[4]]
AIC_index
gamma = seq(from=0.01,to=0.02,by=0.001);
delta = seq(from=0.02,to=0.03,by=0.001);
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
Case1[[1]]
source('functions.R')
source('ADMM_Optim.R')
source('Synthetic Networks.R')
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
Case1[[1]]
Net1[[2]]
source('Synthetic Networks.R')
source('Synthetic Networks.R')
source('Synthetic Networks.R')
Eval_func(Net1[[1]],Case1[[1]][1,1],Case1[[1]][1,2])
Case1[[1]][1,1]
Eval_func(Net1[[1]],gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]])
gamma[Case1[[1]][1,1]]
delta[Case1[[1]][1,2]]
Net1[[2]]
Res[[4]]
source('Synthetic Networks.R')
Eval_func(Net1[[1]],gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]])
Eval_func(Net1[[1]],gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]])
source('Synthetic Networks.R')
Eval_func(Net1[[1]],gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]])
Eval_func(Net1[[1]],gamma[Case1[[2]][1,1]],delta[Case1[[2]][1,2]])
Case1[[4]]
Case1[[3]]
Eval_func(Net1[[1]],gamma[4],delta[9]) # Heuristic
Res <- ADMM(Net1[[1]],gamma[4],delta[9]);
rank <- qr(Res[[3]])$rank;
print(rank);
list <- c();
for(i in 1:n){
for(j in 1:n){
if(i<j && Res[[4]][i,j]!=0){
list = rbind(list, c(i,j));
}
}
}
Net=Net1[[1]]
n = nrow(Net);
list <- c();
for(i in 1:n){
for(j in 1:n){
if(i<j && Res[[4]][i,j]!=0){
list = rbind(list, c(i,j));
}
}
}
list
count = 0;
if(length(list)/2==0){
count = 0;
}else{
for(k in 1:(length(list)/2)){
for(l in 1:(length(Net[[2]])/2)){
if(list[k,1]==Net[[2]][l,1] && list[k,2]==Net[[2]][l,2])
count = count + 1;
}
}
}
(length(list)/2)
(length(Net[[2]])/2)
(length(Net[[2]])/2
(length(Net[[2]])/2)
Net[[2]]
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
source('Synthetic Networks.R')
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
source('Synthetic Networks.R')
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
count <- 1;
MisCl_rate1 <- matrix(rep(0,length(gamma)^2),nrow=length(gamma),ncol=length(delta));
for(i in 1:length(gamma)){
for(j in 1:length(delta)){
MisCl_rate1[i,j] <- CV(Net1[[1]],gamma[i],delta[j],10)
print(count)
count <- count + 1;
}
}
CV <- function(X,gamma,delta,K){
rate <- 0;
for(j in 1:K){
X_fit = X; count = 0;
n = nrow(X); I_1 = sample(1:n, floor(n/2)); I_2 = setdiff(1:n,I_1);
M = expand.grid(I_2,I_2);
for(i in 1:length(I_2)^2){ X_fit[M[i,1],M[i,2]]=0 }
res = ADMM(X_fit,gamma,delta)
alpha = res[[1]]; L = res[[3]]; S = res[[4]];
X_new = CrtData(alpha,L,S,n)[[1]];
for(l in 1:length(I_2)^2){
if(X[M[l,1],M[l,2]]!=X_new[M[l,1],M[l,2]])
count <- count + 1;
}
rate <- rate + (count/length(I_2)^2)/K;
}
return(rate)
}
count <- 1;
MisCl_rate1 <- matrix(rep(0,length(gamma)^2),nrow=length(gamma),ncol=length(delta));
for(i in 1:length(gamma)){
for(j in 1:length(delta)){
MisCl_rate1[i,j] <- CV(Net1[[1]],gamma[i],delta[j],10)
print(count)
count <- count + 1;
}
}
CrtData <- function(alpha,L,S,N){
# Create empty matrix for storing adjacency matrix X and Probability for
X <- matrix(0,N,N);
P <- matrix(0,N,N);
P <- exp(alpha+L+S)/(1+exp(alpha+L+S));
# Create random graph according to (a, L, S)
for(i in 1:(N-1)){
for(j in (i+1):N){
if(P[i,j]>runif(1,0,1))
X[i,j]<-1
}
}
X <- X + t(X)
result <- list(X,P)
return(result)
}
count <- 1;
MisCl_rate1 <- matrix(rep(0,length(gamma)^2),nrow=length(gamma),ncol=length(delta));
for(i in 1:length(gamma)){
for(j in 1:length(delta)){
MisCl_rate1[i,j] <- CV(Net1[[1]],gamma[i],delta[j],10)
print(count)
count <- count + 1;
}
}
Eval_func(Net1,gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]]) # AIC
Eval_func(Net1,gamma[Case1[[2]][1,1]],delta[Case1[[2]][1,2]]) # BIC
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
gamma = seq(from=0.01,to=0.02,by=0.001);
delta = seq(from=0.02,to=0.03,by=0.001);
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
Eval_func(Net1,gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]]) # AIC
Eval_func(Net1,gamma[Case1[[2]][1,1]],delta[Case1[[2]][1,2]]) # BIC
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
count <- 1;
MisCl_rate1 <- matrix(rep(0,length(gamma)^2),nrow=length(gamma),ncol=length(delta));
for(i in 1:length(gamma)){
for(j in 1:length(delta)){
MisCl_rate1[i,j] <- CV(Net1[[1]],gamma[i],delta[j],10)
print(count)
count <- count + 1;
}
}
MisCl_rate1
View(MisCl_rate1)
for(i in 9:length(gamma)){
for(j in 1:length(delta)){
MisCl_rate1[i,j] <- CV(Net1[[1]],gamma[i],delta[j],10)
print(count)
count <- count + 1;
}
}
which(MisCl_rate1==min(MisCl_rate1),arr.ind=TRUE)
Res1 <- ADMM(Net1[[1]],gamma[1],delta[1])
qr(Res1[[3]])$rank;
which(Res1[[4]]!=0,arr.ind=TRUE)
Eval_func(Net1,gamma[1],delta[1]) # Heuristic
Case1[[3]]
Case1[[4]]
gamma = seq(from=0.004,to=0.005,by=0.0001)
delta = seq(from=0.009,to=0.01,by=0.0001)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Eval_func(Net1,gamma[Case2[[1]][1,1]],delta[Case2[[1]][1,2]]) # AIC
Eval_func(Net1,gamma[Case2[[2]][1,1]],delta[Case2[[2]][1,2]]) # BIC
Eval_func(Net2,gamma[Case2[[1]][1,1]],delta[Case2[[1]][1,2]]) # AIC
Eval_func(Net2,gamma[Case2[[2]][1,1]],delta[Case2[[2]][1,2]]) # BIC
Case2[[3]]
Case2[[1]]
View(ADMM)
source('ADMM_Optim.R')
gamma = seq(from=0.004,to=0.005,by=0.0001)
delta = seq(from=0.009,to=0.01,by=0.0001)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2[[3]]
Case2[[4]]
gamma = seq(from=0.002,to=0.003,by=0.0001)
delta = seq(from=0.0046,to=0.0048,by=0.00002)
Case3 <- Model_Sel(Net3[[1]],gamma,delta);
Case3[[3]]
Case4[[4]]
Case3[[4]]
source('ADMM_Optim.R')
which(MisCl_rate3==min(MisCl_rate3),arr.ind=TRUE)
Res3 <- ADMM(Net3[[1]],gamma[8],delta[3])
K_means(Net3[[1]],gamma[8],delta[3],5,1);
qr(Res3[[3]])$rank;
gamma = seq(from=0.002,to=0.003,by=0.0001)
delta = seq(from=0.0046,to=0.0048,by=0.00002)
Case3 <- Model_Sel(Net3[[1]],gamma,delta);
Case3[[4]]
gamma = seq(from=0.002,to=0.003,by=0.0001)
delta = seq(from=0.0046,to=0.0048,by=0.00002)
Case3 <- Model_Sel(Net3[[1]],gamma,delta);
Case3[[4]]
Case3[[3]]
gamma = seq(from=0.01,to=0.02,by=0.001);
delta = seq(from=0.02,to=0.03,by=0.001);
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
source('ADMM_Optim.R')
source('functions.R')
source('Synthetic Networks.R')
CV <- function(X,gamma,delta,K){
rate <- 0;
for(j in 1:K){
X_fit = X; count = 0;
n = nrow(X); I_1 = sample(1:n, floor(n/2)); I_2 = setdiff(1:n,I_1);
M = expand.grid(I_2,I_2);
for(i in 1:length(I_2)^2){ X_fit[M[i,1],M[i,2]]=0 }
res = ADMM(X_fit,gamma,delta)
alpha = res[[1]]; L = res[[3]]; S = res[[4]];
X_new = CrtData(alpha,L,S,n)[[1]];
for(l in 1:length(I_2)^2){
if(X[M[l,1],M[l,2]]!=X_new[M[l,1],M[l,2]])
count <- count + 1;
}
rate <- rate + (count/length(I_2)^2)/K;
}
return(rate)
}
CrtData <- function(alpha,L,S,N){
# Create empty matrix for storing adjacency matrix X and Probability for
X <- matrix(0,N,N);
P <- matrix(0,N,N);
P <- exp(alpha+L+S)/(1+exp(alpha+L+S));
# Create random graph according to (a, L, S)
for(i in 1:(N-1)){
for(j in (i+1):N){
if(P[i,j]>runif(1,0,1))
X[i,j]<-1
}
}
X <- X + t(X)
result <- list(X,P)
return(result)
}
gamma = seq(from=0.01,to=0.02,by=0.001);
delta = seq(from=0.02,to=0.03,by=0.001);
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
Case1[[3]]
Case1[[4]]
gamma = seq(from=0.004,to=0.005,by=0.0001)
delta = seq(from=0.009,to=0.01,by=0.0001)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2[[3]]
Case2[[4]]
gamma = seq(from=0.005,to=0.006,by=0.0001)
delta = seq(from=0.009,to=0.01,by=0.0001)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Eval_func(Net2,gamma[Case2[[1]][1,1]],delta[Case2[[1]][1,2]]) # AIC
Eval_func(Net2,gamma[Case2[[2]][1,1]],delta[Case2[[2]][1,2]]) # BIC
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
Case2[[3]]
Case3[[4]]
Case3[[4]]
Case4[[3]]
Case3[[3]]
gamma = seq(from=0.002,to=0.003,by=0.0001)
delta = seq(from=0.0044,to=0.0046,by=0.00002)
Case3 <- Model_Sel(Net3[[1]],gamma,delta);
Case3[[3]]
Case3[[4]]
gamma = seq(from=0.003,to=0.004,by=0.0001)
delta = seq(from=0.0044,to=0.0046,by=0.00002)
Case3 <- Model_Sel(Net3[[1]],gamma,delta);
Case3[[4]]
Case3[[3]]
gamma = seq(from=0.01,to=0.02,by=0.001);
delta = seq(from=0.02,to=0.03,by=0.001);
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
Eval_func(Net1,gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]]) # AIC
Eval_func(Net1,gamma[Case1[[2]][1,1]],delta[Case1[[2]][1,2]]) # BIC
Case1[[3]]
Case1[[4]]
gamma[Case1[[1]][1,1]]
delta[Case1[[1]][1,2]
delta[Case1[[1]][1,2]]
delta[Case1[[1]][1,2]]
Eval_func(Net1,gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]]) # AIC
source('ADMM_Optim.R')
source('functions.R')
source('Synthetic Networks.R')
CV <- function(X,gamma,delta,K){
rate <- 0;
for(j in 1:K){
X_fit = X; count = 0;
n = nrow(X); I_1 = sample(1:n, floor(n/2)); I_2 = setdiff(1:n,I_1);
M = expand.grid(I_2,I_2);
for(i in 1:length(I_2)^2){ X_fit[M[i,1],M[i,2]]=0 }
res = ADMM(X_fit,gamma,delta)
alpha = res[[1]]; L = res[[3]]; S = res[[4]];
X_new = CrtData(alpha,L,S,n)[[1]];
for(l in 1:length(I_2)^2){
if(X[M[l,1],M[l,2]]!=X_new[M[l,1],M[l,2]])
count <- count + 1;
}
rate <- rate + (count/length(I_2)^2)/K;
}
return(rate)
}
CrtData <- function(alpha,L,S,N){
# Create empty matrix for storing adjacency matrix X and Probability for
X <- matrix(0,N,N);
P <- matrix(0,N,N);
P <- exp(alpha+L+S)/(1+exp(alpha+L+S));
# Create random graph according to (a, L, S)
for(i in 1:(N-1)){
for(j in (i+1):N){
if(P[i,j]>runif(1,0,1))
X[i,j]<-1
}
}
X <- X + t(X)
result <- list(X,P)
return(result)
}
Eval_func(Net1,gamma[Case1[[1]][1,1]],delta[Case1[[1]][1,2]],3,1) # AIC
Eval_func(Net1,gamma[Case1[[2]][1,1]],delta[Case1[[2]][1,2]],3,1) # BIC
Eval_func(Net1,gamma[Case1[[2]][1,1]],delta[Case1[[2]][1,2]],3,1) # BIC
gamma[Case1[[2]][1,1]]
delta[Case1[[2]][1,2]]
Case1[[3]]
table(Case1[[3]])
Case1[[4]]
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
Eval_func(Net1,gamma[4],delta[9],3,1) # Heuristic
gamma[4]
delta[9]
count <- 1;
MisCl_rate1 <- matrix(rep(0,length(gamma)^2),nrow=length(gamma),ncol=length(delta));
for(i in 1:length(gamma)){
for(j in 1:length(delta)){
MisCl_rate1[i,j] <- CV(Net1[[1]],gamma[i],delta[j],10)
print(count)
count <- count + 1;
}
}
which(MisCl_rate1==min(MisCl_rate1),arr.ind=TRUE)
CV_ind <- which(MisCl_rate1==min(MisCl_rate1),arr.ind=TRUE)
Res1 <- ADMM(Net1[[1]],gamma[CV_ind[1,1]],delta[CV_ind[1,2]])
qr(Res1[[3]])$rank;
Eval_func(Net1,gamma[CV_ind[1,1]],delta[CV_ind[1,2]],3,1) # Heuristic
gamma[CV_ind[1,1]]
delta[CV_ind[1,2]]
gamma = seq(from=0.005,to=0.006,by=0.0001)
delta = seq(from=0.009,to=0.01,by=0.0001)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2[[3]]
Case2[[4]]
Eval_func(Net2,gamma[Case2[[1]][1,1]],delta[Case2[[1]][1,2]]) # AIC
source('Synthetic Networks.R')
Eval_func(Net2,gamma[Case2[[1]][1,1]],delta[Case2[[1]][1,2]],1) # AIC
gamma[Case2[[1]][1,1]]
delta[Case2[[1]][1,2]]
Eval_func(Net2,gamma[Case2[[2]][1,1]],delta[Case2[[2]][1,2]],1) # BIC
gamma[Case2[[2]][1,1]]
delta[Case2[[2]][1,2]]
Case2[[2]]
Case2[[1]]
Eval_func(Net2,gamma[Case2[[1]][1,1]],delta[Case2[[1]][1,2]],1) # AIC
Eval_func(Net2,gamma[Case2[[2]][1,1]],delta[Case2[[2]][1,2]],1) # BIC
Case2[[3]]
Case2[[4]]
count <- 1;
MisCl_rate2 <- matrix(rep(0,length(gamma)^2),nrow=length(gamma),ncol=length(delta));
for(i in 1:length(gamma)){
for(j in 1:length(delta)){
MisCl_rate2[i,j] <- CV(Net2[[1]],gamma[i],delta[j],10)
print(count)
count <- count + 1;
}
}
CV_ind <- which(MisCl_rate2==min(MisCl_rate2),arr.ind=TRUE)
CV_ind
Res2 <- ADMM(Net2[[1]],gamma[CV_ind[1,1]],delta[CV_ind[1,2]])
qr(Res2[[3]])$rank;
Case2[[4]]
Eval_func(Net2[[1]],gamma[CV_ind[1,1]],delta[CV_ind[1,2]],1) # Heuristic
Eval_func(Net2,gamma[CV_ind[1,1]],delta[CV_ind[1,2]],1) # Heuristic
Eval_func(Net1,gamma[4],delta[9]) # Heuristic
Eval_func(Net1,gamma[4],delta[9],1) # Heuristic
Eval_func(Net2,gamma[CV_ind[1,1]],delta[CV_ind[1,2]],1) # Heuristic
Eval_func(Net2,gamma[CV_ind[1,1]],delta[CV_ind[1,2]],1) # Heuristic
Res2 <- ADMM(Net2[[1]],gamma[CV_ind[1,1]],delta[CV_ind[1,2]])
qr(Res2[[3]])$rank;
Res2[[3]]
Eval_func(Net2,gamma[CV_ind[1,1]],delta[CV_ind[1,2]],1) # Heuristic
qr(Res2[[3]])$rank;
Net2[[1]]
Eval_func(Net2,gamma[CV_ind[1,1]],delta[CV_ind[1,2]],1) # Heuristic
CV_ind
Eval_func(Net2,gamma[11],delta[11],1) # Heuristic
Res2 <- ADMM(Net2[[1]],gamma[11],delta[11])
qr(Res2[[3]])$rank
Case2[[4]]
Case2[[3]]
Case2[[1]][1,1]]
Case2[[1]][1,1]
Case2[[1]]
Case2[[2]]
Eval_func(Net2,gamma[Case2[[1]][1,1]],delta[Case2[[1]][1,2]],1) # AIC
Eval_func(Net2,gamma[Case2[[2]][1,1]],delta[Case2[[2]][1,2]],1) # BIC
