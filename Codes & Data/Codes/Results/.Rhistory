rm(list=ls())
setwd('C:/Users/namjo/Desktop/Research Files/Network Paper/Codes & Data/Codes')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
library('extrafont')
source('Synthetic Networks.R')
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('ADMM2_Optim.R') ## Function of ADMM algorithm for estimation
Normalize <- function(X){
N = nrow(X); Norm = matrix(0,nrow=N,ncol=N);
for(i in 1:N){
if(sum(X[,i])==0){
next;
}
Norm[,i] = X[,i]/sqrt(sum(X[,i]^2))
}
return(Norm)
}
Non_Zero_S <- function(X){
N = nrow(X); count <- 0;
for(i in 1:N){
for(j in 1:N){
if(i<j && X[i,j]!=0){
count <- count + 1;
}
}
}
print(count)
}
font_import()
loadfonts(device="win")
par(mfrow=c(2,4))
set.seed(123); Net1 <- Network1(100,4,50,1);
set.seed(123); Net2 <- Network1(100,5,50,1);
set.seed(123); Net3 <- Network1(100,6,50,1);
set.seed(123); Net4 <- Network1(100,7,50,1);
set.seed(123); Net11 <- Network1(100,4,18,1);
set.seed(123); Net22 <- Network1(100,4,30,1);
set.seed(123); Net33 <- Network1(100,4,42,1);
set.seed(123); Net44 <- Network1(100,4,54,1);
source('Synthetic Networks.R')
source('SynData.R')    ## Function for creating binary network
set.seed(123); Net1 <- Network1(100,4,50,1);
set.seed(123); Net11 <- Network1(100,4,18,1);
rm(list=ls())
setwd('C:/Users/namjo/Desktop/Research Files/Network Paper/Codes & Data/Codes')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
library('extrafont')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
library('extrafont')
source('Synthetic Networks.R')
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('ADMM2_Optim.R') ## Function of ADMM algorithm for estimation
Normalize <- function(X){
N = nrow(X); Norm = matrix(0,nrow=N,ncol=N);
for(i in 1:N){
if(sum(X[,i])==0){
next;
}
Norm[,i] = X[,i]/sqrt(sum(X[,i]^2))
}
return(Norm)
}
Non_Zero_S <- function(X){
N = nrow(X); count <- 0;
for(i in 1:N){
for(j in 1:N){
if(i<j && X[i,j]!=0){
count <- count + 1;
}
}
}
print(count)
}
Normalize <- function(X){
N = nrow(X); Norm = matrix(0,nrow=N,ncol=N);
for(i in 1:N){
if(sum(X[,i])==0){
next;
}
Norm[,i] = X[,i]/sqrt(sum(X[,i]^2))
}
return(Norm)
}
Non_Zero_S <- function(X){
N = nrow(X); count <- 0;
for(i in 1:N){
for(j in 1:N){
if(i<j && X[i,j]!=0){
count <- count + 1;
}
}
}
print(count)
}
font_import()
loadfonts(device="win")
par(mfrow=c(2,4))
set.seed(123); Net1 <- Network1(100,4,50,1);
set.seed(123); Net1 <- Network1(100,4,50,1);
set.seed(123); Net2 <- Network1(100,5,50,1);
set.seed(123); Net3 <- Network1(100,6,50,1);
set.seed(123); Net4 <- Network1(100,7,50,1);
N=100
K=5
K=4
NNZ=50
case=1
alpha = runif(1,-11,-10)
### Create diagonal matrix D with non-negative weights
D = diag(runif(1,19,20),K)
### Create binary matrix F(0,1) whose columns are orthogonal with each other.
C = floor(N/K);              # C : number of 1s for each column
F = matrix(0,N,K);           # Create empty F matrix
if(K>0){
for(l in 1:K){
F[((l-1)*C+1):(l*C),l] <- 1
}
if(N%%C!=0)
F[(K*C+1):N,K] <- 1      # In last column of F, we fill the last remaining entries with 1s,
# when N is not divided by K.
}
if(K==0){
F <- matrix(0,N,K)
}
F = (diag(N)-1/N*matrix(1,N,N))%*%F
ad_hoc_ind = c();  A = choose(K,2);
for(i in 1:(K-1)){
for(j in i:(K-1)){
ind = cbind( sample( ((N/K)*(i-1)+1):((N/K)*i), floor(NNZ/A), replace = FALSE),
sample( ((N/K)*(j)+1):((N/K)*(j+1)), floor(NNZ/A), replace = FALSE ) )
ad_hoc_ind = rbind(ad_hoc_ind,ind)
}
}
S = matrix(0,N,N)
S[ad_hoc_ind]=runif(1,19,20)
S = S + t(S)
diag(S) = 0
X1 <- as.matrix(SynData(alpha,F,D,S,N)[[1]])
P <- SynData(alpha,F,D,S,N)[[2]]
### generate the figure to illustrate the network
X_draw <- graph_from_adjacency_matrix(X1, mode = c("undirected"))
Edge = which(S>0, arr.ind=TRUE)
g = graph_from_edgelist(Edge)
S_g = as.undirected(g)
A=get.edgelist(X_draw)
B=get.edgelist(S_g)
list = rep(0,length(B[,1]))
for(i in 1:length(B[,1])){
for(j in 1:length(A[,1])){
if(B[i,1]==A[j,1] && B[i,2]==A[j,2]){
list[i] = j;
break;
}
}
}
E(X_draw)$color <- "red"
E(X_draw)[list]$color <- "green"
plot(X_draw, family="serif", vertex.size=10, vertex.label=NA)
Edge = which(S>0, arr.ind=TRUE)
g = graph_from_edgelist(Edge)
S_g = as.undirected(g)
A=get.edgelist(X_draw)
B=get.edgelist(S_g)
list = rep(0,length(B[,1]))
for(i in 1:length(B[,1])){
for(j in 1:length(A[,1])){
if(B[i,1]==A[j,1] && B[i,2]==A[j,2]){
list[i] = j;
break;
}
}
}
E(X_draw)$color <- "red"
E(X_draw)[list]$color <- "green"
A
B
Edge = which(S>0, arr.ind=TRUE)
g = graph_from_edgelist(Edge)
S_g = as.undirected(g)
A=get.edgelist(X_draw)
B=get.edgelist(S_g)
A
X_draw
X1
X1 <- as.matrix(SynData(alpha,F,D,S,N)[[1]])
X1
alpha
F
D
S
N
View(SynData)
X1 <- as.matrix(SynData(alpha,F,D,S,N))
X1
source('Synthetic Networks.R')
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('ADMM2_Optim.R') ## Function of ADMM algorithm for estimation
Normalize <- function(X){
N = nrow(X); Norm = matrix(0,nrow=N,ncol=N);
for(i in 1:N){
if(sum(X[,i])==0){
next;
}
Norm[,i] = X[,i]/sqrt(sum(X[,i]^2))
}
return(Norm)
}
Non_Zero_S <- function(X){
N = nrow(X); count <- 0;
for(i in 1:N){
for(j in 1:N){
if(i<j && X[i,j]!=0){
count <- count + 1;
}
}
}
print(count)
}
par(mfrow=c(2,4))
set.seed(123); Net1 <- Network1(100,4,50,1);
set.seed(123); Net2 <- Network1(100,5,50,1);
set.seed(123); Net3 <- Network1(100,6,50,1);
set.seed(123); Net4 <- Network1(100,7,50,1);
set.seed(123); Net11 <- Network1(100,4,18,1);
set.seed(123); Net22 <- Network1(100,4,30,1);
set.seed(123); Net33 <- Network1(100,4,42,1);
set.seed(123); Net44 <- Network1(100,4,54,1);
Res1 <- ADMM(Net1[[1]],0.004,0.0085)
qr(Res1[[3]])$rank; Non_Zero_S(Res1[[4]]);
sum((Normalize(Res1[[3]])-Normalize(Net1[[4]]))^2)
Res2 <- ADMM(Net2[[1]],0.004,0.008)
qr(Res2[[3]])$rank; Non_Zero_S(Res2[[4]]);
sum((Normalize(Res1[[3]])-Normalize(Net1[[4]]))^2)
sum((Normalize(Res2[[3]])-Normalize(Net2[[4]]))^2)
Res3 <- ADMM(Net3[[1]],0.004,0.007)
qr(Res3[[3]])$rank; Non_Zero_S(Res3[[4]]);
sum((Normalize(Res3[[3]])-Normalize(Net3[[4]]))^2)
Res4 <- ADMM(Net4[[1]],0.0045,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
Res3 <- ADMM(Net3[[1]],0.004,0.007)
qr(Res3[[3]])$rank; Non_Zero_S(Res3[[4]]);
Res4 <- ADMM(Net4[[1]],0.0045,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res2 <- ADMM(Net2[[1]],0.004,0.008)
qr(Res2[[3]])$rank; Non_Zero_S(Res2[[4]]);
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.007,to=0.01,by=0.0005)
gamma[5]
delta[3]
Res11 <- ADMM(Net11[[1]],0.0038,0.008)
qr(Res11[[3]])$rank; Non_Zero_S(Res11[[4]]);
gamma = seq(from=0.0035,to=0.004,by=0.0002)
delta = seq(from=0.007,to=0.01,by=0.0007)
gamma[2]
delta[3]
Res22 <- ADMM(Net22[[1]],0.0037,0.0084)
qr(Res22[[3]])$rank; Non_Zero_S(Res22[[4]]);
gamma = seq(from=0.0035,to=0.004,by=0.0002)
delta = seq(from=0.007,to=0.01,by=0.0007)
gamma[2]
delta[4]
Res33 <- ADMM(Net33[[1]],0.0037,0.0091)
qr(Res33[[3]])$rank; Non_Zero_S(Res33[[4]]);
gamma = seq(from=0.0035,to=0.004,by=0.0002)
delta = seq(from=0.007,to=0.01,by=0.0005)
delta[4]
Res44 <- ADMM(Net44[[1]],0.0035,0.0085);
qr(Res44[[3]])$rank; Non_Zero_S(Res44[[4]]);
sum((Res44[[4]]-Net44[[5]])^2)
Res1 <- ADMM(Net1[[1]],0.004,0.0085)
qr(Res1[[3]])$rank; Non_Zero_S(Res1[[4]]);
Res1 <- ADMM(Net1[[1]],0.004,0.0085)
qr(Res1[[3]])$rank; Non_Zero_S(Res1[[4]]);
Res2 <- ADMM(Net2[[1]],0.004,0.008)
qr(Res2[[3]])$rank; Non_Zero_S(Res2[[4]]);
Res3 <- ADMM(Net3[[1]],0.004,0.007)
qr(Res3[[3]])$rank; Non_Zero_S(Res3[[4]]);
Res4 <- ADMM(Net4[[1]],0.0045,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res11 <- ADMM(Net11[[1]],0.0038,0.008)
qr(Res11[[3]])$rank; Non_Zero_S(Res11[[4]]);
Res22 <- ADMM(Net22[[1]],0.0037,0.0084)
qr(Res22[[3]])$rank; Non_Zero_S(Res22[[4]]);
Res33 <- ADMM(Net33[[1]],0.0037,0.0091)
qr(Res33[[3]])$rank; Non_Zero_S(Res33[[4]]);
Res33 <- ADMM(Net33[[1]],0.0037,0.0091)
qr(Res33[[3]])$rank; Non_Zero_S(Res33[[4]]);
Res44 <- ADMM(Net44[[1]],0.0035,0.0085);
qr(Res44[[3]])$rank; Non_Zero_S(Res44[[4]]);
Res11 <- ADMM(Net11[[1]],0.0038,0.008)
qr(Res11[[3]])$rank; Non_Zero_S(Res11[[4]]);
Res22 <- ADMM(Net22[[1]],0.0037,0.0084)
qr(Res22[[3]])$rank; Non_Zero_S(Res22[[4]]);
Res33 <- ADMM(Net33[[1]],0.0037,0.0091)
qr(Res33[[3]])$rank; Non_Zero_S(Res33[[4]]);
Res44 <- ADMM(Net44[[1]],0.0035,0.0085);
qr(Res44[[3]])$rank; Non_Zero_S(Res44[[4]]);
Res1 <- ADMM(Net1[[1]],0.004,0.0085)
qr(Res1[[3]])$rank; Non_Zero_S(Res1[[4]]);
Res2 <- ADMM(Net2[[1]],0.004,0.008)
qr(Res2[[3]])$rank; Non_Zero_S(Res2[[4]]);
Res3 <- ADMM(Net3[[1]],0.004,0.007)
qr(Res3[[3]])$rank; Non_Zero_S(Res3[[4]]);
Res4 <- ADMM(Net4[[1]],0.0045,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res4 <- ADMM(Net4[[1]],0.004,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res4 <- ADMM(Net4[[1]],0.0035,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res4 <- ADMM(Net4[[1]],0.003,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res4 <- ADMM(Net4[[1]],0.0025,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res4 <- ADMM(Net4[[1]],0.0027,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res4 <- ADMM(Net4[[1]],0.0026,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res4 <- ADMM(Net4[[1]],0.0045,0.007)
qr(Res4[[3]])$rank; Non_Zero_S(Res4[[4]]);
Res3 <- ADMM(Net3[[1]],0.004,0.007)
qr(Res3[[3]])$rank; Non_Zero_S(Res3[[4]]);
gamma = seq(from=0.002,to=0.004,by=0.001)
delta = seq(from=0.007,to=0.010,by=0.0005)
Case1 <- Model_Sel(Net1[[1]],gamma,delta);
Case1
Res1 <- ADMM(Net1[[1]],0.004,0.007)
qr(Res1[[3]])$rank; Non_Zero_S(Res1[[4]]);
gamma = seq(from=0.004,to=0.0045,by=0.0005)
delta = seq(from=0.008,to=0.015,by=0.003)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.004,to=0.0045,by=0.0005)
delta = seq(from=0.008,to=0.015,by=0.001)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.004,to=0.0045,by=0.00025)
delta = seq(from=0.008,to=0.015,by=0.003)
gamma = seq(from=0.004,to=0.0045,by=0.0002)
delta = seq(from=0.008,to=0.015,by=0.003)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
delta = seq(from=0.005,to=0.008,by=0.0003)
gamma = seq(from=0.004,to=0.0045,by=0.0002)
delta = seq(from=0.005,to=0.008,by=0.0003)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma[3]
delta[9]
Res2 <- ADMM(Net2[[1]],0.0044,0.0074)
qr(Res2[[3]])$rank; Non_Zero_S(Res2[[4]]);
Res1 <- ADMM(Net1[[1]],0.004,0.007)
qr(Res1[[3]])$rank; Non_Zero_S(Res1[[4]]);
Res2 <- ADMM(Net2[[1]],0.0044,0.0074)
qr(Res2[[3]])$rank; Non_Zero_S(Res2[[4]]);
gamma = seq(from=0.004,to=0.0045,by=0.0002)
delta = seq(from=0.003,to=0.008,by=0.0005)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma[2]
delta[6]
Res2 <- ADMM(Net2[[1]],0.0042,0.0055)
qr(Res2[[3]])$rank; Non_Zero_S(Res2[[4]]);
######################### Case 2 #########################
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.007,to=0.008,by=0.0002)
set.seed(123); Net1 <- Network1(30,3,9,1)
set.seed(123); Net2 <- Network1(80,4,18,2)
set.seed(123); Net3 <- Network1(120,5,30,3)
gamma = seq(from=0.01,to=0.02,by=0.002);
delta = seq(from=0.02,to=0.03,by=0.002);
gamma = seq(from=0.01,to=0.02,by=0.002);
delta = seq(from=0.02,to=0.03,by=0.002);
Eval_func(Net1,gamma[1],delta[1],1) # NHCV
Eval_func(Net1,gamma[1],delta[1],1) # NHCV
Eval_func(Net1,gamma[1],delta[1],1) # NHCV
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.007,to=0.008,by=0.0002)
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.007,to=0.008,by=0.0002)
Eval_func(Net2,gamma[3],delta[5],2) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.0052,to=0.0054,by=0.00004)
Eval_func(Net3,gamma[2],delta[4],3) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002);
delta = seq(from=0.055,to=0.065,by=0.002);
Case4 <- Model_Sel(Net4[[1]],gamma,delta);
Eval_func(Net4,gamma[3],delta[1],4) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002);
delta = seq(from=0.055,to=0.065,by=0.002);
gamma = seq(from=0.002,to=0.0022,by=0.00005);
delta = seq(from=0.045,to=0.055,by=0.0025);
Eval_func(Net5,gamma[4],delta[2],5) # NHCV
set.seed(123); Net4 <- Network2(120,10,0,3,20,4)
set.seed(123); Net5 <- Network2(210,0,50,3,18,5)
set.seed(123); Net6 <- Network2(210,10,10,3,18,6)
Eval_func(Net4,gamma[3],delta[1],4) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002);
delta = seq(from=0.055,to=0.065,by=0.002);
Eval_func(Net4,gamma[3],delta[1],4) # NHCV
K_means(Net4[[1]], gamma[3],delta[1], 4, 4)
sort(Net4[[6]]) # Nodes with 3 overlapped membership
sort(Net4[[6]]) # Nodes with 3 overlapped membership
Net4
K_means(Net4[[1]], gamma[3],delta[1], 4, 4)
sort(Net4[[7]]) # Nodes with 3 overlapped membership
gamma = seq(from=0.002,to=0.0022,by=0.00005);
delta = seq(from=0.045,to=0.055,by=0.0025);
Eval_func(Net5,gamma[4],delta[2],5) # NHCV
K_means(Net5[[1]], gamma[4],delta[2], 6, 5)
sort(Net5[[6]]) # Nodes with overlapped membership
gamma = seq(from=0.0018,to=0.003,by=0.0003);
delta = seq(from=0.015,to=0.02,by=0.001);
Eval_func(Net6,gamma[1],delta[2],6) # NHCV
K_means(Net6[[1]], gamma[1],delta[2], 5, 6)
sort(Net6[[6]]) # Nodes with 2 overlapped membership
sort(Net6[[7]]) # Nodes with 3 overlapped membership
Eval_func(Net1,gamma[1],delta[1],1) # NHCV
gamma = seq(from=0.01,to=0.02,by=0.002);
delta = seq(from=0.02,to=0.03,by=0.002);
Eval_func(Net1,gamma[1],delta[1],1) # NHCV
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.007,to=0.008,by=0.0002)
Eval_func(Net2,gamma[3],delta[5],2) # NHCV
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.007,to=0.008,by=0.0002)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.006,to=0.007,by=0.0002)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.004,to=0.005,by=0.0002)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.002,to=0.003,by=0.0002)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.001,to=0.001,by=0.0002)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.005,to=0.006,by=0.0002)
delta = seq(from=0.0005,to=0.001,by=0.0002)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.0052,to=0.0054,by=0.00004)
Eval_func(Net3,gamma[2],delta[4],3) # NHCV
set.seed(123); Net4 <- Network2(120,10,0,3,20,4)
set.seed(123); Net5 <- Network2(210,0,50,3,18,5)
set.seed(123); Net6 <- Network2(210,10,10,3,18,6)
gamma = seq(from=0.003,to=0.004,by=0.0002);
delta = seq(from=0.055,to=0.065,by=0.002);
Eval_func(Net4,gamma[3],delta[1],4) # NHCV
sort(Net4[[7]]) # Nodes with 3 overlapped membership
K_means(Net4[[1]], gamma[3],delta[1], 4, 4)
gamma = seq(from=0.002,to=0.0022,by=0.00005);
delta = seq(from=0.045,to=0.055,by=0.0025);
Eval_func(Net5,gamma[4],delta[2],5) # NHCV
qr(Net5[[3]])$rank
gamma = seq(from=0.0018,to=0.003,by=0.0003);
delta = seq(from=0.015,to=0.02,by=0.001);
Eval_func(Net6,gamma[1],delta[2],6) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.0052,to=0.0054,by=0.00004)
Eval_func(Net3,gamma[2],delta[4],3) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.0052,to=0.0054,by=0.00004)
Case3 <- Model_Sel(Net3[[1]],gamma,delta);
Case3
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.0052,to=0.0054,by=0.00004)
Eval_func(Net3,gamma[2],delta[4],3) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.004,to=0.0044,by=0.00004)
Case3 <- Model_Sel(Net3[[1]],gamma,delta);
Case3
Eval_func(Net3,gamma[5],delta[7],3) # NHCV
Case2
gamma = seq(from=0.004,to=0.005,by=0.0002)
delta = seq(from=0.0005,to=0.001,by=0.0002)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
delta = seq(from=0.0002,to=0.0004,by=0.0002)
delta = seq(from=0.0002,to=0.0004,by=0.00005)
gamma = seq(from=0.004,to=0.005,by=0.0002)
delta = seq(from=0.0002,to=0.0004,by=0.00005)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
delta = seq(from=0.0001,to=0.0002,by=0.00005)
gamma = seq(from=0.004,to=0.005,by=0.0002)
delta = seq(from=0.0001,to=0.0002,by=0.00005)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
delta = seq(from=0.0000,to=0.0002,by=0.00005)
gamma = seq(from=0.004,to=0.005,by=0.0002)
delta = seq(from=0.0000,to=0.0002,by=0.00005)
Case2 <- Model_Sel(Net2[[1]],gamma,delta);
Case2
Eval_func(Net2,gamma[4],delta[4],2) # NHCV
gamma = seq(from=0.003,to=0.004,by=0.0002)
delta = seq(from=0.004,to=0.0044,by=0.00004)
Eval_func(Net3,gamma[5],delta[7],3) # NHCV
