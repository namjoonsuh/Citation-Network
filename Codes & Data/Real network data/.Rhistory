lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X_chunk)
X_chunk = X[Topic4,Topic4]
N = ncol(X_chunk)
N
View(L_Rank)
View(non_zeroS)
################### Load the Citation Network Data ###################
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Statistician network data')
paperCitAdj = as.matrix(read.table("paperCitAdj.txt", header=FALSE))
G <- graph.adjacency(paperCitAdj, mode="undirected", weighted=NULL) # For directed networks
X <- as_adjacency_matrix(G,type="both",names=TRUE,sparse=FALSE,attr=NULL)
Node_deg <- rep(0,nrow(X))
for (i in 1:sqrt(length(X))){
Node_deg[i]<-sum(X[i,])
}
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes')
library('Matrix')      ## For matrix computation on BIC
library('igraph')      ## For drawing graph
source('SynData.R')    ## Function for creating binary network
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
###### Get a network whose degree is greater than or equal to 10 ######
ind <- which(Node_deg>=10,arr.ind=TRUE)
X_new <- X[ind,ind]
N <- ncol(X_new)
A = rowSums(X_new)
ind = which(A==0,arr.ind=TRUE)
X = X_new[-ind,-ind]
gamma = seq(from=0.00210,to=0.00213,by=0.000003);
delta = seq(from=0.018,to=0.019,by=0.00008);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X)
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes') ## Function of ADMM algorithm for estimation
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(L_Rank)
View(non_zeroS)
for(g in 2:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
View(L_Rank)
obs = MH(0.4356, 100, adj)
source("C:/Users/namjo/Desktop/Ising ChangePoint/Codes/MH.R")
source("C:/Users/namjo/Desktop/Dr Mei/Ising model/Ising ChangePoint/Codes/MH.R")
obs = MH(0.4356, 100, adj)
View(MH)
View(MH)
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
}
x <- c(temp_x,x)
y <- c(obs,y)
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
print(q); print(p);
print(Theta_pre);
View(non_zeroS)
for(g in 3:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
for(g in 5:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
View(non_zeroS)
View(L_Rank)
gamma[5]
gamma[6]
gamma = seq(from=0.002112,to=0.002115,by=0.0000003);
gamma = seq(from=0.002112,to=0.002115,by=0.0000003);
delta = seq(from=0.018,to=0.019,by=0.00008);
lambda = 1; Count = 1;
AIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
BIC <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
non_zeroS <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
L_Rank <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
Like <- matrix( 0, nrow=length(gamma),ncol=length(delta) )
N = ncol(X)
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Codes') ## Function of ADMM algorithm for estimation
source('ADMM_Optim.R') ## Function of ADMM algorithm for estimation
source('functions.R')
source('GD.R')
for(g in 1:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
for(g in 5:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
for(g in 7:length(gamma)){
for(d in 1:length(delta)) {
### Use the ADMM method to estimate the parameters ###
result <- ADMM(X, gamma[g], delta[d])
a<-result[[1]]
M<-result[[2]]
L<-result[[3]]
S<-result[[4]]
non_zero_S <- 0
for(i in 1:N){
for(j in 1:N){
if(i<j){
if(S[i,j] != 0)
non_zero_S = non_zero_S + 1
}
}
}
non_zero_S
K<-qr(L)$rank
K
M_absolute <- (N*K-((K-1)*K/2)) + non_zero_S + 1
log_sum<-log(1+exp(a + L + S))
log_max <- 0;
log_max <- a*sum(X[upper.tri(X,diag=FALSE)]) +
(1/2)*sum(X*(L+S)) - sum(log_sum[upper.tri(log_sum,diag=FALSE)])
AIC[g,d] <- -2*log_max + M_absolute*2
BIC[g,d] <- -2*log_max + M_absolute*(log((N*(N-1))/2))
Like[g,d] <- log_max
non_zeroS[g,d] <- non_zero_S
L_Rank[g,d] <- qr(L)$rank
print(Count)
Count <- Count + 1
}
}
xnew1 = c(); n=500; count <- 1
for(jj in 1:100){
obs = MH(0.4356, 100, adj)
xnew1 = rbind(xnew1,c(obs))
print(count)
count <- count + 1
}
View(non_zeroS)
for(jj in 64:100){
obs = MH(0.4356, 100, adj)
xnew1 = rbind(xnew1,c(obs))
print(count)
count <- count + 1
}
xnew2 = c(); n=100; count <- 1
for(jj in 1:100){
obs = MH(0.380, 100, adj)
xnew2 = rbind(xnew2,c(obs))
print(count)
count <- count + 1
}
for(jj in 1:100){
x <- c(); y <- c();
obs = xnew1[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
est <- rep(0,100);
for(jj in 1:100){
x <- c(); y <- c();
obs = xnew1[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
hist(est)
est
for(jj in 1:100){
x <- c(); y <- c();
obs = xnew2[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
mean(est)
hist(est)
est
hist(est<=1)
hist(est<1)
est = est<1
obs = xnew2[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
Q[jj] = Q[jj] + obs[j]*temp_x[j]
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
for(jj in 1:100){
x <- c(); y <- c();
obs = xnew2[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
Q[jj] = Q[jj] + obs[j]*temp_x[j]
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
Q <- rep(0,N);
for(jj in 1:100){
x <- c(); y <- c();
obs = xnew2[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
Q[jj] = Q[jj] + obs[j]*temp_x[j]
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
hist(est)
est
hist(est[-8])
for(jj in 1:100){
x <- c(); y <- c();
obs = xnew1[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
Q[jj] = Q[jj] + obs[j]*temp_x[j]
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
est
est<-est[est<1]
hist(est)
for(jj in 1:400){
obs = MH(0.4356, 100, adj)
xnew1 = rbind(xnew1,c(obs))
print(count)
count <- count + 1
}
#xnew2 = c(); n=100; count <- 1
for(jj in 1:400){
obs = MH(0.380, 100, adj)
xnew2 = rbind(xnew2,c(obs))
print(count)
count <- count + 1
}
hist(est[est<1])
est <- rep(0,500);
for(jj in 1:500){
x <- c(); y <- c();
obs = xnew1[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
hist(est[est<1])
est <- rep(0,475);
for(jj in 1:475){
x <- c(); y <- c();
obs = xnew2[jj,];
for(j in 1:100){
neighbour = setdiff(which(adj[j,]!=0),j)
temp_x[j] = sum(obs[neighbour])
}
x <- c(temp_x); y <- c(obs);
y[y==-1]=0
fit = glm(y~x,family=binomial())
Theta_pre <- (fit$coeff/2)[2]
est[jj] <- Theta_pre
}
hist(est[est<1])
setwd('C:/Users/namjo/Desktop/Dr Mei/Ising model/Ising ChangePoint/Codes') ## Function of ADMM algorithm for estimation
save(xnew1, file = "Theta_0.4356.R")
save(xnew1, file = "Theta_0.4356.txt")
write.table(xnew1, file = "Theta_0.4356.txt")
write.table(xnew1, file = "Theta_0.4356.txt",head=FALSE)
write.table(xnew1, file = "Theta_0.4356.txt",row.names = FALSE, col.names = FALSE)
write.table(xnew2, file = "Theta_0.380.txt",row.names = FALSE, col.names = FALSE)
setwd('C:/Users/namjo/Documents/GitHub/Citation-Network/Codes & Data/Statistician network data')
write.table(non_zeroS, file = "non_zero_S.txt",row.names = FALSE, col.names = FALSE)
View(L_Rank)
write.table(L_rank, file = "L_rank.txt",row.names = FALSE, col.names = FALSE)
write.table(L_Rank, file = "L_Rank.txt",row.names = FALSE, col.names = FALSE)
